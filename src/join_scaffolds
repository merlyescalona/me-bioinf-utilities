#!/usr/bin/python
import pysam,gzip, argparse,datetime, collections, csv, os, sys, filetype, logging
import numpy as np
from Bio import SeqIO

# ========================================================================================
PROGRAM_NAME="join_scaffolds"
VERSION=1
MIN_VERSION=0
FIX_VERSION=0
# ========================================================================================
APPLOGGER = logging.getLogger(PROGRAM_NAME)
APPLOGGER.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
loggerFormatter = logging.Formatter(\
	fmt = "[%(asctime)s] %(levelname)s (%(funcName)s|%(lineno)d): %(message)s",\
	datefmt = "%d/%m/%Y %I:%M:%S %p")
ch.setFormatter(loggerFormatter)
APPLOGGER.addHandler(ch)

def run(parameters):
  message="All correct."
  APPLOGGER.info("Reading file...")
  handle=None
  filekind=filetype.guess(parameters['input'])
  if filekind and filekind.extension in ['gz','GZ','gZ','Gz']:
    APPLOGGER.info("Running gzip...")
    handle=gzip.open(parameters['input'], "rt")
  else:
    handle=open(parameters['input'], "rt")
  APPLOGGER.info("Creating output file...")
  APPLOGGER.info("Parsing FASTA file...")
  lens=[]
  records=SeqIO.to_dict(SeqIO.parse(handle,"fasta"))
  handle.close()
  finalsequenceorder=[]
  APPLOGGER.info("Joining scaffolds...")
  Ns="N"*parameters['nsize']
  sequence=""
  scaffold_list=parse_scaffolds_file(parameters)
  APPLOGGER.info(len(records)) 
  # for record in records:
  description="|".join(scaffold_list)
  for scaffold in scaffold_list:
      scaffold_list.remove(scaffold)
      sequence+=records[scaffold].seq
      if len(scaffold_list)>0:
  			sequence+=Ns
  APPLOGGER.info("Sequence generated...") 
  finalsequenceorder+=[\
    SeqIO.SeqRecord(\
      id="JOINED_SCAFFOLD",\
      seq=sequence,\
      description=description
      )
    ]	
  APPLOGGER.info("Writing output file...")
  with open(parameters['output'], "wb") as out:
    _=SeqIO.write(finalsequenceorder,out, "fasta")
  APPLOGGER.info("Closing files...")
  return True, message

def parse_scaffolds_file(parameters):
  scaffold_list=[]
  message="All correct."
  APPLOGGER.info("Parsing scaffolds file...")
  handle=None
  filekind=filetype.guess(parameters['scaffoldsfile'])
  if filekind and filekind.extension in ['gz','GZ','gZ','Gz']:
    APPLOGGER.info("Running gzip...")
    handle=gzip.open(parameters['scaffoldsfile'], "rt")
  else:
    handle=open(parameters['scaffoldsfile'], "rt")
  APPLOGGER.info("Getting scaffolds...")
  for line in handle.readlines():
    scaffold_list+=[line.strip()]
  handle.close()
  return scaffold_list

def main():
  parser = argparse.ArgumentParser(\
  prog=PROGRAM_NAME,\
    description='==============================================================================\n'+\
    'Joins scaffolds from a reference with nsize separation.',\
    add_help=True)
  requiredArgs=parser.add_argument_group("{0}Required arguments{1}".format("\033[1m","\033[0m"))
  requiredArgs.add_argument(\
    '-i','--input',\
    metavar = '<sequences.fasta>',\
    type = str,\
    required = True,\
    help = 'Filepath of the reference genome file to be used.  Plain or compressed (GZ).')
  requiredArgs.add_argument(\
    '-o','--output',\
    metavar = '<file_path>',\
    type = str,\
    required = True,\
    help = 'Output file path.')
  requiredArgs.add_argument(\
    '-s','--scaffolds',\
    metavar = '<file_path>',\
    type = str,\
    required = True,\
    help = 'File path with the scaffold names to be joint. Scaffold name per line. Plain or compressed (GZ).')
  optionalArts=parser.add_argument_group("{0}Optional arguments{1}".format("\033[1m","\033[0m"))
  optionalArts.add_argument(\
    '-n','--nsize',\
    metavar = '<size>',\
    type = int,\
    default= 1000,\
    help = 'N sequence size for separation intrascaffolds. Default: 1,000')
  informationGroup= parser.add_argument_group("{0}Information arguments{1}".format("\033[1m","\033[0m"))
  informationGroup.add_argument(\
    '-l','--log',\
    metavar = '<log_level>',\
    type = str,\
    choices = ['INFO','DEBUG'],\
    default= 'INFO',\
    help = 'Verbosity levels.')
  informationGroup.add_argument('-v', '--version',\
    action='version',\
    version='{0}: Version {1}.{2}.{3}'.format(PROGRAM_NAME,VERSION,MIN_VERSION,FIX_VERSION),\
    help="Show program's version number and exit")
  try:
    args = parser.parse_args()	
    APPLOGGER.debug(args)
    parameters=dict()
    # Checking files
    if args.log == 'DEBUG':
      APPLOGGER.setLevel(logging.DEBUG)
    else:
      APPLOGGER.setLevel(logging.INFO)
    if (os.path.exists(os.path.abspath(args.input))):
      REFFILE=os.path.abspath(args.input)
    else:
      message="Reference file does not exist. Please verify. Exiiting."
      return (-1, message)
    SCAFFOLDS=os.path.abspath(args.scaffolds)
    if (not os.path.exists(SCAFFOLDS)):
      message="Scaffolds file does not exist. Please verify. Exiiting."
      return (-1, message)
    OUTPUT=os.path.abspath(args.output)
    if (os.path.exists(OUTPUT)):
      message="Output file exist. Not overwriting. Please verify. Exiiting."
      return (-1, message)
    parameters['output']=OUTPUT
    parameters['nsize']=args.nsize
    parameters['input']=REFFILE
    parameters['scaffoldsfile']=SCAFFOLDS
    return run(parameters)
  except:
    message="Parsing error. Exiting"
    # parser.print_help()
    return (-1, message)

if __name__ == "__main__":
	SIGNAL_EXIT,MESSAGE=main()
	if SIGNAL_EXIT == -1:
		APPLOGGER.error(MESSAGE)
	else:
		APPLOGGER.info(MESSAGE)
	sys.exit(SIGNAL_EXIT)

