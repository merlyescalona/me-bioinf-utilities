#!/usr/bin/python
import pysam,gzip, argparse,datetime, collections, csv, os, sys, filetype, logging
import numpy as np
from Bio import SeqIO, Seq

# ========================================================================================
PROGRAM_NAME="split_gappy_sequence"
VERSION=1
MIN_VERSION=0
FIX_VERSION=0
# ========================================================================================
APPLOGGER = logging.getLogger(PROGRAM_NAME)
APPLOGGER.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
loggerFormatter = logging.Formatter(\
  fmt = "[%(asctime)s]  %(levelname)s (%(funcName)s|%(lineno)d): %(message)s",\
  datefmt = "%d/%m/%Y %I:%M:%S %p")
ch.setFormatter(loggerFormatter)
APPLOGGER.addHandler(ch)
#=========================================================================================
def readGenomeAssembly(parameters):
    # read genome assembly file
    scaffolds=dict()
    APPLOGGER.info("Reading genome file...")
    handle=None
    filekind=filetype.guess(parameters['genome_filename'])
    if filekind and filekind.extension in ['gz','GZ','gZ','Gz']:
        APPLOGGER.info("Running gzip...")
        handle=gzip.open(parameters['genome_filename'], "rt")
    else:
        handle=open(parameters['genome_filename'], "rt")
    scaffolds=SeqIO.to_dict(SeqIO.parse(handle, "fasta")) 
    handle.close()
    return scaffolds

def run(parameters):
    APPLOGGER.info("Start")
    try:
        scaffolds=readGenomeAssembly(parameters)
        newscaffolds=[]
        APPLOGGER.info("Setting scaffold keys...")
        for sc in scaffolds:
            sequence=str(scaffolds[sc].seq)
            seqs=[s for s in sequence.split("N") if s != ""]
            APPLOGGER.info(len(seqs))
            for cIndex in range(0,len(seqs)):
                APPLOGGER.debug("{:5}/{:5}".format(cIndex,len(seqs)))
                newSeq2=SeqIO.SeqRecord(\
                    seq=Seq.Seq(seqs[cIndex]),\
                    id="{};Part={}".format(sc,cIndex),\
                )
                newscaffolds+=[newSeq2]
        # ====================================================================================
        # Writing output
        APPLOGGER.info("Writing output...({})".format(parameters['output_filename']))                
        with open(parameters['output_filename'], "w") as handle: 
            _=SeqIO.write(newscaffolds,handle,"fasta")
    except Exception as ex:
        return -1, ex.message
    return 0,"Done."

def main():
    parser = argparse.ArgumentParser(\
    prog=PROGRAM_NAME,\
        description='Generates a new version of the given assembly in a contig-only level.',\
        add_help=False\
    )
    requiredArgs=parser.add_argument_group("{0}Required arguments{1}".format("\033[1m","\033[0m"))
    requiredArgs.add_argument(\
        '-i','--input',\
        metavar = '<sequences.fasta>',\
        type = str,\
        required = True,\
        help = 'Filepath of the reference genome file to be used (accepts .gz.)')
    requiredArgs.add_argument(\
        '-o','--output',\
        metavar = '<file_path>',\
        type = str,\
        required = True,\
        help = 'Output file path.')        
    optionalArts=parser.add_argument_group("{0}Optional arguments{1}".format("\033[1m","\033[0m"))
    optionalArts.add_argument(\
        '-l','--log',\
        metavar = '<log_level>',\
        type = str,\
        choices = ['INFO','DEBUG'],\
        default= 'INFO',\
        help = 'Verbosity levels.')
    informationGroup= parser.add_argument_group("{0}Information arguments{1}".format("\033[1m","\033[0m"))
    informationGroup.add_argument('-v', '--version',\
        action='version',\
        version='{0}: Version {1}.{2}.{3}'.format(PROGRAM_NAME,VERSION,MIN_VERSION,FIX_VERSION),\
        help="Show program's version number and exit")
    informationGroup.add_argument('-h', '--help',\
        action='store_true',\
        help="Show this help message and exit")         
    try:
        args=parser.parse_args()
        APPLOGGER.debug(args)
        parameters=dict()
        if args.help: 
            return(0,"Finished")
        # Checking files
        if args.log == 'DEBUG':
            APPLOGGER.setLevel(logging.DEBUG)
        else:
			APPLOGGER.setLevel(logging.INFO)
        # Checking input file
        if (os.path.exists(os.path.abspath(args.input))):
			REFFILE=os.path.abspath(args.input)
        else:
			message="Reference file does not exist. Please verify. Exiting."
			return (-1, message)
        # Checking output file
        if not (os.path.exists(os.path.abspath(args.output))):
			OUTPUT=os.path.abspath(args.output)
        else:
			message="Output file exist. File will NOT be overwritten. Please verify. Exiting."
			return (-1, message)
        parameters['genome_filename']=REFFILE
        parameters['output_filename']=OUTPUT
        return run(parameters)
    except:
        message="Parsing error. Exiting"
        parser.print_help()
        return (-1, message)


if __name__ == "__main__":
    SIGNAL_EXIT,MESSAGE=main()
    if SIGNAL_EXIT == -1:
        APPLOGGER.error(MESSAGE)
    else:
        APPLOGGER.info(MESSAGE)
    sys.exit(SIGNAL_EXIT)
